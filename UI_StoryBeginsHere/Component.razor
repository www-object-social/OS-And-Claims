@inject Product.Infomation PI;
@inject Progress.Manager PM;
@inject UnitIdentification.Engine UIE;
@if(PM.Status is Progress.manager.Status.Startup)
@if (PI.Name is StandardInternal.product.infomation.Name.BadClaims or StandardInternal.product.infomation.Name.GoodClaims or StandardInternal.product.infomation.Name.MemoryClaims)
{
    <audio controls autoplay style="visibility:hidden">
        <source src="_content/SharedLayout/startup.mp3" type="audio/mpeg">
    </audio>
    @if(!Welcome)
    @switch (this.PI.Name)
    {
        case StandardInternal.product.infomation.Name.BadClaims:
            <div class="text mullermedium-600">@BadClaims</div>
            break;
        case StandardInternal.product.infomation.Name.GoodClaims:
            <div class="text mullermedium-600">@GoodClaims</div>
            break;
        default:
            <div class="text mullermedium-600">@MemoryClaims</div>
            break;
    }else {
            <div class="text mullermedium-600">@Storage</div>
        }


    <div class="emoji">@UseEmoji</div>
}
else
{
    <div class="text">connection together</div>
}
@code {
    [Parameter]
    public RenderFragment BadClaims { get; set; } = null!;
    [Parameter]
    public RenderFragment GoodClaims { get; set; } = null!;
    [Parameter]
    public RenderFragment MemoryClaims { get; set; } = null!;
    [Parameter]
    public RenderFragment Storage { get; set; } = null!;
    private bool Welcome { get; set; } = false;
    private string UseEmoji = "";
    private string[] Emojis = new[] { "😀", "😃", "😄", "😁", "😆", "😅", "😂", "🤣", "🥲", "😊", "😇", "🙂", "🙃", "😉", "😌", "😍", "🥰", "😘", "😗", "😙", "😚", "😋", "😛", "😝", "😜", "🤪", "🤨", "🧐", "🤓", "😎", "🥸", "🤩", "🥳", "😏", "😒", "😞", "😔", "😟", "😕", "🙁", "😣", "😖", "😫", "😩", "🥺", "😢", "😭", "😮‍💨", "😤", "😠", "😡", "🤬", "🤯", "😳", "🥵", "🥶", "😱", "😨", "😰", "😥", "😓", "🤗", "🤔", "🤭", "🤫", "🤥", "😶", "😐", "😑", "😬", "🙄", "😯", "😦", "😧", "😮", "😲", "🥱", "😴", "🤤", "😪", "😵", "😵‍💫", "🤐", "🥴", "🤢", "🤮", "🤧", "😷", "🤒", "🤕", "🤑", "🤠", "😈", "👿", "👹", "👺", "🤡", "💩", "👻", "💀", "☠️", "👽", "👾", "🤖", "🎃", "😺", "😸", "😹", "😻", "😼", "😽", "🙀", "😿", "😾", "❤️" };
    protected override async Task OnInitializedAsync()
    {
        PM.Change += () => InvokeAsync(this.StateHasChanged);
        if (PI.Name is StandardInternal.product.infomation.Name.BadClaims or StandardInternal.product.infomation.Name.GoodClaims or StandardInternal.product.infomation.Name.MemoryClaims)
        {
            this.UIE.Change += () => InvokeAsync(this.StateHasChanged);
            var PmT = PM.Register;
            PmT.Install();
            var EmjoiTime = 5000 / Emojis.Length;
            for (var i = 0; i < Emojis.Length; i++)
            {
                UseEmoji = Emojis[new Random().Next(0, Emojis.Length - 1)] + Emojis[i] + Emojis[new Random().Next(0, Emojis.Length - 1)];

                this.StateHasChanged();
                await Task.Delay(EmjoiTime);
            }
            Welcome = true;
            UseEmoji = Emojis[new Random().Next(0, Emojis.Length - 1)];
            this.StateHasChanged();
            await Task.Delay(1500);
            PmT.Done();
        }
        await base.OnInitializedAsync();
    }
}